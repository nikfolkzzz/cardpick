{"version":3,"sources":["Card.js","CardsCount.js","Cards.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","cls","cardState","visible","push","special","className","join","onClick","flipCard","index","role","aria-label","CardsCount","removeCard","count","addCard","restartCards","random","require","console","log","int","Cards","createNewCardArr","arrLength","randomCard","Math","ceil","Array","from","length","v","k","useState","countCards","setCountCards","cardIndex","map","item","card","key","value","splice","App","React","Component","ReactDOM","render","document","querySelector","Boolean","window","location","hostname","match","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qUAiCeA,G,MA/BF,SAAAC,GACX,IAAMC,EAAM,CAAC,QAWb,MATgC,SAA5BD,EAAME,UAAUC,SAClBF,EAAIG,KAAK,eAGqB,IAA5BJ,EAAME,UAAUG,SAElBJ,EAAIG,KAAK,sBAIT,yBAAKE,UAAU,SACb,yBACEA,UAAWL,EAAIM,KAAK,KACpBC,QAAS,kBAAMR,EAAMS,SAAST,EAAMU,SAEpC,yBAAKJ,UAAU,gCACb,0BAAMK,KAAK,MAAMC,aAAW,QAA5B,iBAIF,yBAAKN,UAAU,+BACb,0BAAMK,KAAK,MAAMC,aAAW,cCPvBC,EAjBI,SAAAb,GACjB,OACE,yBAAKM,UAAU,gBACb,4BAAQA,UAAU,cAAcE,QAAS,kBAAMR,EAAMc,WAAW,OAAhE,SAGA,0BAAMR,UAAU,aAAaN,EAAMe,MAAnC,KACA,4BAAQT,UAAU,aAAaE,QAAS,kBAAMR,EAAMgB,QAAQ,OAA5D,QAGA,4BAAQV,UAAU,eAAeE,QAASR,EAAMiB,cAAhD,YCNAC,EAASC,EAAQ,IACvBC,QAAQC,IAAIH,EAAOI,IAAI,EAAG,IAC1B,IAqDeC,EArDD,WACZ,IAAMC,EAAmB,SAAAC,GACvB,IAAIC,EAAa,EAOjB,OALyBA,EADP,IAAdD,EACFE,KAAKT,SAAW,GAAoB,EAAmB,EAE1CS,KAAKC,KAAKD,KAAKT,UAAYO,EAAY,GAAK,GAGpDI,MAAMC,KAAK,CAAEC,OAAQN,IAAa,SAACO,EAAGC,GAC3C,MAAO,CAAE9B,QAAS,OAAQE,QAAS4B,IAAMP,EAAa,OAVxC,EAakBQ,mBAASV,EAAiB,IAb5C,mBAaXW,EAbW,KAaCC,EAbD,KAsBZ3B,EAAW,SAAA4B,GAAS,OACxBD,EACED,EAAWG,KAAI,SAACC,EAAM7B,GAAP,OACbA,IAAU2B,EAAV,eAA2BE,EAA3B,GAAoC,CAAEpC,QAAS,SAAaoC,OAI5DC,EAAOL,EAAWG,KAAI,SAACC,EAAM7B,GAAP,OAC1B,kBAAC,EAAD,CACER,UAAWiC,EAAWzB,GACtBD,SAAUA,EACVgC,IAAK/B,EACLA,MAAOA,EACPgC,MAAOH,OAIX,OACE,yBAAKjC,UAAU,aACb,kBAAC,EAAD,CACES,MAAOoB,EAAWJ,OAClBf,QA1BU,kBACdoB,EAAc,GAAD,mBAAKD,GAAL,CAAiB,CAAEhC,QAAS,OAAQE,SAAS,OA0BtDS,WAzBa,kBACjBqB,EAAWJ,OAAS,EAAIK,EAAcD,EAAWQ,OAAO,IAAM,MAyB1D1B,aA9BW,kBAAMmB,EAAcZ,EAAiBW,EAAWJ,YAiC7D,yBAAKzB,UAAU,mBAAmBkC,KCnDnBI,E,iLAEjB,OAAO,kBAAC,EAAD,U,GAFsBC,IAAMC,WAMvCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,UCC5BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNR,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASO,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.bfc94659.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = props => {\r\n  const cls = [\"card\"];\r\n\r\n  if (props.cardState.visible === \"show\") {\r\n    cls.push(\"is-flipped\");\r\n  }\r\n\r\n  if (props.cardState.special === true) {\r\n    // cls.pop();\r\n    cls.push(\"is-flipped-special\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"scene\">\r\n      <div\r\n        className={cls.join(\" \")}\r\n        onClick={() => props.flipCard(props.index)}\r\n      >\r\n        <div className=\"card__face card__face--front\">\r\n          <span role=\"img\" aria-label=\"good\">\r\n            ðŸ¤”\r\n          </span>\r\n        </div>\r\n        <div className=\"card__face card__face--back\">\r\n          <span role=\"img\" aria-label=\"cool\"></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nconst CardsCount = props => {\r\n  return (\r\n    <div className=\" cards-count\">\r\n      <button className=\" btn__count\" onClick={() => props.removeCard(\"-\")}>\r\n        mns -\r\n      </button>\r\n      <span className=\"count-val\">{props.count} </span>\r\n      <button className=\"btn__count\" onClick={() => props.addCard(\"+\")}>\r\n        pls+\r\n      </button>\r\n      <button className=\" btn__reload\" onClick={props.restartCards}>\r\n        reload\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardsCount;\r\n","import React, { useState } from \"react\";\r\nimport \"materialize-css\";\r\n\r\nimport Card from \"./Card\";\r\nimport CardsCount from \"./CardsCount\";\r\n\r\nconst random = require(\"random\");\r\nconsole.log(random.int(1, 5));\r\nconst Cards = () => {\r\n  const createNewCardArr = arrLength => {\r\n    let randomCard = 0;\r\n    if (arrLength === 2) {\r\n      Math.random() > 0.5 ? (randomCard = 1) : (randomCard = 2);\r\n    } else {\r\n      randomCard = Math.ceil(Math.random() * (arrLength - 1) + 1);\r\n    }\r\n\r\n    return Array.from({ length: arrLength }, (v, k) => {\r\n      return { visible: \"hide\", special: k === randomCard - 1 ? true : false };\r\n    });\r\n  };\r\n  const [countCards, setCountCards] = useState(createNewCardArr(2));\r\n\r\n  const flipDeck = () => setCountCards(createNewCardArr(countCards.length));\r\n\r\n  const addCard = () =>\r\n    setCountCards([...countCards, { visible: \"hide\", special: false }]);\r\n  const removeCard = () =>\r\n    countCards.length > 2 ? setCountCards(countCards.splice(1)) : null;\r\n\r\n  const flipCard = cardIndex =>\r\n    setCountCards(\r\n      countCards.map((item, index) =>\r\n        index === cardIndex ? { ...item, ...{ visible: \"show\" } } : item\r\n      )\r\n    );\r\n\r\n  const card = countCards.map((item, index) => (\r\n    <Card\r\n      cardState={countCards[index]}\r\n      flipCard={flipCard}\r\n      key={index}\r\n      index={index}\r\n      value={item}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <CardsCount\r\n        count={countCards.length}\r\n        addCard={addCard}\r\n        removeCard={removeCard}\r\n        restartCards={flipDeck}\r\n      />\r\n\r\n      <div className=\"cards-container\">{card}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles.css\";\r\n\r\nimport Cards from \"./Cards\";\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return <Cards />;\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}